{"version":3,"sources":["components/User.js","components/Comment.js","components/CommentList.js","components/Post.js","components/PostList.js","App.js","serviceWorker.js","index.js"],"names":["User","props","react_default","a","createElement","className","user","name","username","email","Comment","comments","map","el","Fragment","key","id","href","body","CommentList","components_Comment","Post","find","post","userId","filter","postId","title","components_User","components_CommentList","PostList","posts","components_Post","users","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onLoad","setState","prev","disable","setTimeout","loadData","then","isLoaded","asyncToGenerator","regenerator_default","mark","_callee","BASE_URL","wrap","_context","next","fetch","concat","response","json","result","stop","state","components_PostList","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98e48979.chunk.js","sourcesContent":["import React from 'react';\n\nfunction User(props) {\n    return (\n        <div className='post__users-data'>\n            <h2>Autor:</h2>\n            <div>\n                <div>{props.user.name}</div>\n                <div>{props.user.username}</div>\n                <div>{props.user.email}</div>\n            </div>\n        </div>\n    )\n}\n\nexport default User;","import React from 'react';\n\n//ключ в 12 строке добавила, но предупреждение все равно показывает, что делаю не так?\n\nfunction Comment(props) {\n    return (\n        <div>\n            <h2>Comments:</h2>\n            {props.comments.map(el => {\n                return (\n                    <>\n                        <div key={el.id} className='post__comment'>\n                            <div className=\"post__comment-autor\">\n                                <span> {el.name} </span>\n                                <a href=\"#\"> {el.email} </a>\n                            </div>\n                            <div> {el.body} </div>\n                        </div>\n                    </>\n                )\n            })}\n        </div>\n    )\n}\n\n\nexport default Comment;","import React from 'react';\nimport Comment from './Comment'\n\nfunction CommentList(props) {\n    return (\n        <Comment comments={props.comments}/>\n    )\n}\n\nexport default CommentList;","import React from 'react';\nimport User from './User'\nimport CommentList from './CommentList'\n\n\nfunction Post(props) {\n    const user = props.user.find(el => el.id === props.post.userId);\n    const comments = props.comments.filter(el => el.postId === props.post.userId);\n\n    return (\n        <div className=\"post\">\n            <h2 className='post__title'>{props.post.title}</h2>\n            <p className='post__body'> {props.post.body}</p>\n            <User user={user}/>\n            <CommentList comments={comments}/>\n        </div>\n    )\n}\n\nexport default Post;","import React from 'react';\nimport Post from './../components/Post'\n\n\nfunction PostList(props) {\n    return (\n        <div className='list'>\n            {props.posts.map(el =>\n                <Post post={el}\n                      key={el.id}\n                      user={props.users}\n                      comments={props.comments}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default PostList;","import React from 'react';\nimport './App.css';\nimport PostList from './components/PostList'\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            disable: false,\n            posts: [],\n            users: [],\n            comments: [],\n        }\n    }\n\n    onLoad = () => {\n        this.setState(prev => {\n            return {\n                disable: !prev.disable\n            }\n        });\n        setTimeout(() => {\n            this.loadData().then(this.setState({\n                isLoaded: true\n            }))\n        }, 600)\n    };\n\n\n    loadData = async () => {\n        const BASE_URL = 'https://jsonplaceholder.typicode.com';\n        fetch(`${BASE_URL}/posts`)\n            .then(response => response.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        posts: result\n                    });\n                });\n\n\n        fetch(`${BASE_URL}/users`)\n            .then(response => response.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        users: result\n                    });\n                });\n\n        fetch(`${BASE_URL}/comments`)\n            .then(response => response.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        comments: result\n                    });\n                });\n    };\n\n    render() {\n        return (\n            <div>\n                <h1 className='title'> Dynamic list of posts </h1>\n                {this.state.isLoaded ?\n                    <PostList posts={this.state.posts} users={this.state.users} comments={this.state.comments}/>\n                    :\n                    <button\n                        className=\"btn\"\n                        onClick={this.onLoad}>\n                        {this.state.disable ? \"Loading...\" : \"Load\"}\n                    </button>\n                }\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}