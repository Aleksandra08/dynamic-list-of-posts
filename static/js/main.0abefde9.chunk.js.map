{"version":3,"sources":["components/User.js","components/Comments.js","components/CommentList.js","components/Post.js","components/PostList.js","api/getData.js","App.js","serviceWorker.js","index.js"],"names":["User","_ref","user","react_default","a","createElement","className","name","username","email","Comments","comments","map","comment","key","id","href","body","CommentList","components_Comments","Post","post","title","components_User","components_CommentList","PostList","posts","components_Post","BASE_URL","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onLoad","setState","prev","disable","setTimeout","loadData","then","isLoaded","state","Promise","all","fetch","concat","response","json","users","postWithAllData","objectSpread","find","userId","filter","postId","components_PostList","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0abefde9.chunk.js","sourcesContent":["import React from 'react';\n\nfunction User({user}) {\n    return (\n        <div className='post__users-data'>\n            <h2 className='post__users-data_autor'>Autor:</h2>\n            <div>\n                <div>{user.name}</div>\n                <div>{user.username}</div>\n                <div>{user.email}</div>\n            </div>\n        </div>\n    )\n}\n\nexport default User;","import React from 'react';\n\nfunction Comments({comments}) {\n    return (\n        <div>\n            <h2 className='post__comment_title'>Comments:</h2>\n            {comments.map(comment => {\n                return (\n                    <div key={comment.id} className='post__comment'>\n                        <div className=\"post__comment-autor\">\n                            <div> {comment.name} </div>\n                            <a href=\"#\" className=\"post__comment-link\"> {comment.email} </a>\n                        </div>\n                        <div> {comment.body} </div>\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\n\nexport default Comments;","import React from 'react';\nimport Comments from './Comments'\n\nfunction CommentList({comments}) {\n    return (\n        <Comments comments={comments}/>\n    )\n}\n\nexport default CommentList;","import React from 'react';\nimport User from './User'\nimport CommentList from './CommentList'\n\n\nfunction Post({post}) {\n\n    return (\n        <div className=\"post\">\n            <h2 className='post__title'>{post.title}</h2>\n            <p className='post__body'> {post.body}</p>\n            <User user={post.user}/>\n            <CommentList comments={post.comments}/>\n        </div>\n    )\n}\n\nexport default Post;","import React from 'react';\nimport Post from './../components/Post'\n\n\nfunction PostList({posts}) {\n    return (\n        <div className='list'>\n            {posts.map(post =>\n                <Post post={post}\n                      key={post.id}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default PostList;","const BASE_URL = 'https://jsonplaceholder.typicode.com';\n\nexport const getPosts = () => fetch(`${BASE_URL}/posts`).then(response => response.json());\n\nexport const getUsers = () => fetch(`${BASE_URL}/users`).then(response => response.json());\n\nexport const getComments = () => fetch(`${BASE_URL}/comments`).then(response => response.json());\n","import React from 'react';\nimport './App.css';\nimport PostList from './components/PostList'\nimport {getPosts, getUsers, getComments} from \"./api/getData\";\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            disable: false,\n            posts: [],\n        }\n    }\n\n    onLoad = () => {\n        this.setState(prev => {\n            return {\n                disable: !prev.disable\n            }\n        });\n        setTimeout(() => {\n            this.loadData().then(this.setState({\n                isLoaded: true\n            }))\n        }, 600)\n    };\n\n\n    async loadData() {\n        const [posts, users, comments] = await Promise.all([getPosts(), getUsers(), getComments()]);\n        let postWithAllData = posts.map((post) => {\n            return {\n                ...post,\n                user: users.find(user => user.id === post.userId),\n                comments: comments.filter(comment => comment.postId === post.id)\n            }\n        });\n        this.setState({\n            posts: postWithAllData,\n        })\n\n    };\n\n    render() {\n        return (\n            <div>\n                <h1 className='title'> Dynamic list of posts </h1>\n                {this.state.isLoaded ?\n                    (<PostList posts={this.state.posts}/>)\n                    :\n                    (<button\n                        className=\"btn\"\n                        onClick={this.onLoad}>\n                        {this.state.disable ? \"Loading...\" : \"Load\"}\n                    </button>)\n                }\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}